#include <ncurses.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

/**
 * @struct  GameInfo_t
 * @brief Структура хранящая в себе данные об игре
 *
 */
typedef struct {
  int** field;    /**< Поле игровое */
  int** next;     /**< Поле для фигуры */
  int score;      /**< Счет*/
  int high_score; /**< Общий счет*/
  int level;      /**< Уровень*/
  int speed;      /**< Скорость*/
  int pause;      /**< Пауза*/
} GameInfo_t;

/**
 * @struct  position_f
 * @brief Структура хранящая в себе номер фигуры и координаты ее центра
 *
 */
typedef struct {
  int figure; /**< Номер фигуры*/
  int X;      /**< Координата по Х*/
  int Y;      /**< Координата по У*/

} position_f;

/**
 * @struct  part_coordinate
 * @brief Структура хранящая в себе коодинаты всех частей фигуры
 *
 */
typedef struct {
  int X1; /**< Коодинаты 1 по Х*/
  int Y1; /**< Коодинаты 1 по У*/
  int X2; /**< Коодинаты 2 по Х*/
  int Y2; /**< Коодинаты 2 по У*/
  int X3; /**< Коодинаты 3 по Х*/
  int Y3; /**< Коодинаты 3 по У*/
} part_coordinate;

/**
 * @brief Вывод заставки
 *
 * Вывод заставки который считывается из .txt файла
 * @param[in] a Если 1 то заставка в начале , если 2 заставка конца игры
 * @return Ничего не возвращает
 */
void start_screen(int a);

/**
 * @brief Вывод поля
 *
 * Вывод актуального поля которое считывается из передоваемой в нее структуры
 * @param[in] game_data Структура с данными о игровом поле и другими данными по
 * игре
 * @return Ничего не возвращает
 */
void output_tetris(GameInfo_t game_data);

/**
 * @brief Отчищает память
 *
 * Отчищает память выделенную под поле и под фигуру в структуре
 * @param[in] game_data Структура с данными о игровом поле и другими данными по
 * игре
 * @return Ничего не возвращает
 */
void free_data(GameInfo_t* game_data);

/**
 * @brief Запись в поле "1"
 *
 * Проверка по координатам находится ли данная точка на поле и перезапись на "1"
 * если условия подошли
 * @param[in] g Структура с данными о игровом поле и другими данными по игре
 * @param y координата по y
 * @param x координата по x
 * @return Ничего не возвращает
 */
void write_1(GameInfo_t* g, int y, int x);

/**
 * @brief проверка координаты снизу
 *
 * проверка по всем пунктам положения по координатам
 * @param[in] g Структура с данными о игровом поле и другими данными по игре
 * @param y координата по y
 * @param x координата по x
 * @return Возвращает ошибку(1) если точка занята или (0) если свободна
 */
int check_down_coord(GameInfo_t* g, int y, int x);

/**
 * @brief Запись в поле "0"
 *
 * Проверка по координатам находится ли данная точка на поле и перезапись на "0"
 * если условия подошли
 * @param[in] g Структура с данными о игровом поле и другими данными по игре
 * @param y координата по y
 * @param x координата по x
 * @return Ничего не возвращает
 */
void write_0(GameInfo_t* g, int y, int x);

/**
 * @brief Изменения координат при вращении
 *
 * При вращении фигуры в зависимости от цента смена значений по x и y
 * @param y координата по y
 * @param x координата по x
 * @return Ничего не возвращает
 */
void spin(int* x, int* y);

/**
 * @brief Смена координат при вращении для всех частей фигуры
 *
 * @param[in] figure структура со значением центра фигуры и номера фигуры
 * @param[out] coordinate структура с координатами каждой части фигуры
 * @return Ничего не возвращает
 */
void spin_figure(position_f* figure, part_coordinate* coordinate);

/**
 * @brief Запись координат в зависимости от фигуры
 *
 * @param[in] number_figure номер фигуры
 * @param[out] A структура в которую запишутся координаты
 * @return Ничего не возвращает
 */
void coordinate_figure(int number_figure, part_coordinate* A);

/**
 * @brief Постановка центра фигуры в стартовое положение
 *
 * @param[in] data_figure структура с координатами центра и номером фигуры
 * @return Ничего не возвращает
 */
void put_figure(position_f* data_figure);

/**
 * @brief Запись в структуру стартовых позиций
 *
 * @param[in] game_data Структура с данными о игровом поле и другими данными по
 * игре
 * @return Ничего не возвращает
 */
void starting_position(GameInfo_t* game_data);

/**
 * @brief Генерация следующей фигуры
 *
 * @param[in] data_tetris Структура с данными о игровом поле и другими данными
 * по игре
 * @return Возвращет номер сгенерированной фигуры
 */
int spawn(GameInfo_t* data_tetris);

/**
 * @brief Функция для сдвига фигуры
 *

 * @param[in] g Структура с данными о игровом поле и другими данными по игре
 * @param f структура с координатами центра и номером фигуры
 * @param c структура с координатами каждой части фигуры
 * @param ch значение которое дает понять куда мы двигаемся (вправо, влево,
 вниз)
 * @return возвращает 1 если не удалось сдвинуть фигуру в нужную сторону
 */
int move_figure(GameInfo_t* g, position_f* f, part_coordinate* c, int ch);

/**
 * @brief Удаление заполненых строк
 *
 * @param[in] M Структура с данными о игровом поле и другими данными по игре
 * @return Возвращает количество строк которые пропали за раз
 */
int delete_line(GameInfo_t* M);

/**
 * @brief Подсчет очков и уровня , изменение скорости в зависимости от уровня
 *
 * @param line количество линий которые пропали
 * @param g Структура с данными о игровом поле и другими данными по игре
 * @param speed скорость
 * @return Ничего не возвращает
 */
void count_score_lvl_speed(int line, GameInfo_t* g, int* speed);

/**
 * @brief Проверка кончилась ли игра
 *
 * @param game_data Структура с данными о игровом поле и другими данными по игре
 * @return Ничего не возвращает
 */
int lose_or_continue(GameInfo_t* g);

/**
 * @brief Краткое описание функции
 *
 * @param g Структура с данными о игровом поле и другими данными по игре
 * @param f структура с координатами центра и номером фигуры
 * @param c структура с координатами каждой части фигуры
 * @param speed скорость
 * @return Возвращает 1 если человек вышел из игры
 */
int user_input(GameInfo_t* g, position_f* f, part_coordinate* c, int* speed);
